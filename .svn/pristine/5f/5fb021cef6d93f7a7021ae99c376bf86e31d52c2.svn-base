/*
 *    File:         owd.js
 *
 *    Author:       Fernando Garcia
 *                  Jose Gonzalez
 *                  Universidad PolitÃ©cnica de MAdrid
 *
 *    Date:         13/03/2014
 *
 *    Description:    
 *
 *    License:
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */


'use strict';


var nam = require('./common/nam');

//var baseParser = require('./base').parser;

// NAM adapter "OWD" probe-specific parser
// References: 
//
// Context attributes to be calculated:
//     freeSpacePct = percentage of free space at given group/single partition (NO MULTIPLE PARTITIONS SUPPORTED UNLESS GROUPED!)
//
// Sample data:
//
//{
//  "idTest": "Owd-1393612954320",
//  "region": "XIFI_UPM",
//  "type": "Owd",
//  "timestamp": "28-2-2014 / 19:42",
//  "hostSource": "138.4.47.33",
//  "hostDestination": "193.1.202.133",
//  "error": false,
//  "result": "owd_sc_min:26ms, owd_sc_max:26ms, owd_cs_min:76ms, owd_cs_max:79ms, jitter_sc:0ms, jitter_cs:3ms ",
//  "_id": "5310d89a0b50d751022d9bd5"
//}
//
//
//  Data:
//	
//          result": "owd_sc_min:26ms, owd_sc_max:26ms, owd_cs_min:76ms, owd_cs_max:79ms, jitter_sc:0ms, jitter_cs:3ms ",
//                              ^                ^                ^                ^               ^              ^     
// One Way Delay   	        |	   	 |                |                |               |              |
// Source --> Destination	|		 |		  |		   |		   |		  |		   
// 	Min --------------------+                | 	          |                |               |              | 
// 	Max -------------------------------------+   		  |		   |		   |		  |
// Destination --> Source 					  |		   |		   |		  |
// 	Min ------------------------------------------------------+                |               |        	  |      	 
// 	Max -----------------------------------------------------------------------+               |        	  |      	  
// Jitter											   |		  |
// Source --> Destination -------------------------------------------------------------------------+              |
// Destination --> Source ----------------------------------------------------------------------------------------+ 
//    


var parser = Object.create(nam.parser);
    
parser.parseRequest = function() {
    var entityData = {};

    
            entityData.data = this.request.body;
            entityData.perfData += this.request.body;

    return entityData;
};


parser.getContextAttrs = function(multilineData, multilinePerfData) {
    var data  = JSON.parse(multilineData);   

    var attrs = { OWD_data: NaN, jitter: NaN};
	//attrs.OWD_data = JSON.parse(data.result);

	/*NaN, owd_sc_max: NaN, owd_cs_min: NaN, owd_cs_max: NaN, jitter_sc: NaN, jitter_cs: NaN };
	attrs.owd_sc_min = data.result;
	attrs.owd_sc_max = data.result;
	attrs.owd_cs_min = data.result;
	attrs.owd_cs_max = data.result;
	attrs.jitter_sc = data.result;
	attrs.jitter_cs = data.result.jitter_cs;*/

    var items = data.result.match(/([-0-9.]+)/gm);
  
    

    var i = 0;
    
    for (i in items){
        items[i]=parseFloat(items[i].match(/[0-9.]+/)); 

    }


    attrs.jitter = [items[4], items[5]];

    attrs.OWD_data = [items[0], items[1], items[2], items[3]];;

    if (attrs.OWD_data==NaN) {
        throw new Error('No valid bandwith data found');
    }

    return attrs;
};


exports.parser = parser;